<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="All" InitialTargets="Configure" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
		<IntermediateOutputPath>.nuget\</IntermediateOutputPath>
		<PackagesPath>$(IntermediateOutputPath)packages</PackagesPath>
		<Out Condition=" '$(Out)' == '' ">$(MSBuildThisFileDirectory)out</Out>
		<GitInfoBaseDir>$(MSBuildThisFileDirectory)src</GitInfoBaseDir>
		<!-- We always use DeployExtension=false from the build script to ensure a clean build, but 
			 also because if we run integration tests, we do so by installing the resulting VSIX, 
			 which makes for a cleaner test too. 	-->
		<CommonBuildProperties>WarningLevel=0;NoWarn=1591;RunCodeAnalysis=false;Configuration=$(Configuration);Out=$(Out);DeployExtension=false</CommonBuildProperties>
		<DefaultImportance Condition=" '$(DefaultImportance)' == '' ">high</DefaultImportance>
	</PropertyGroup>

	<Import Project="$(PackagesPath)\MSBuilder.IsCIBuild\build\MSBuilder.IsCIBuild.props"
			Condition="Exists('$(PackagesPath)\MSBuilder.IsCIBuild\build\MSBuilder.IsCIBuild.props') "/>

	<!-- Integration-test related stuff -->
	<PropertyGroup>
		<_RootSuffix>$(RootSuffix)</_RootSuffix>
		<_RootSuffix Condition=" '$(_RootSuffix)' == '' ">Exp</_RootSuffix>
		<_RootSuffix Condition=" '$(_RootSuffix)' == '.' "></_RootSuffix>
		<IntegrationTest Condition=" '$(IntegrationTest)' == '' And '$(IsCIBuild)' == 'true' ">true</IntegrationTest>
		<Installer>$(MSBuildThisFileDirectory)src\Vsix\Merq.Vsix\bin\$(Configuration)\Merq.vsix</Installer>
	</PropertyGroup>
	
	<ItemGroup>
		<Solution Include="src\*.sln"/>
		<TestProject Include="src\**\*.Tests.csproj" />
		<IntegrationTestProject Include="src\**\*.IntegrationTests.csproj" Condition=" '$(IntegrationTest)' == 'true' " />
	</ItemGroup>

	<Target Name="All" DependsOnTargets="Build;Test;Package" />

	<Target Name="Clean">
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" Targets="Clean" />
		<Exec Command="rmdir $(Out) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir $(PackagesPath) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir src\packages /S /Q" ContinueOnError="true" />
	</Target>

	<Target Name="Rebuild" DependsOnTargets="Clean;Build" />

	<Target Name="Build" DependsOnTargets="$(BuildDependsOn)">
		<Exec Command='rmdir "$(Out)" /S /Q' Condition="Exists('$(Out)')" ContinueOnError="true" StandardOutputImportance="low" />
		<Message Text="Build properties: $(CommonBuildProperties)" Importance="high" />
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" />
	</Target>

	<Target Name="Package">
		<ItemGroup>
			<NuSpec Include="src\**\*.nuspec" Exclude="src\**\obj\*\*.nuspec;src\packages\**\*.nuspec" />
		</ItemGroup>

		<Exec Command="$(PackagesPath)\gitlink\lib\net45\GitLink.exe . -f &quot;$([System.String]::new('%(Solution.FullPath)').Replace('$(MSBuildProjectDirectory)', '').TrimStart('\').TrimStart('/'))&quot; -u https://github.com/MobileEssentials/Merq -b &quot;$(GitBranch)&quot; -c &quot;$(Configuration)&quot;" StandardOutputImportance="low" />

		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />
		
		<!-- NOTE: we unify the *package* version here and all NuGets will have a single package version
			 even if individually the locally-specified GitInfo.txt (i.e. in the Async and Merq core interfaces)
			 specify a different version for their assembly version #. 
			 Implementations assembly versions match the package version, however.
			 This helps avoid confusion by users.
		-->
		<Exec Command='"$(NuGet)" Pack "%(NuSpec.Filename)%(NuSpec.Extension)" -Version $(Version) -Properties Id=%(NuSpec.Filename);Configuration=$(Configuration);Version=$(Version) -OutputDirectory $(Out)'
			  WorkingDirectory='%(NuSpec.RootDir)%(NuSpec.Directory)'/>

		<ItemGroup>
			<Installer Include="src\**\*.msi" />
			<Installer Include="src\**\*.vsix" />
		</ItemGroup>

		<Copy SourceFiles="@(Installer)"
			  DestinationFiles="@(Installer->'$(Out)\%(Filename).$(Version)%(Extension)')"
			  SkipUnchangedFiles="true" />
		<Copy SourceFiles="src\Vsix\Merq.Vsix\bin\$(Configuration)\Microsoft.VisualStudio.Xamarin.Merq.json"
			  DestinationFolder="$(Out)"
			  SkipUnchangedFiles="true" />
	</Target>

	<Import Project="$(PackagesPath)\MSBuilder.CodeTaskAssembly\build\MSBuilder.CodeTaskAssembly.props"
			Condition=" Exists('$(PackagesPath)\MSBuilder.CodeTaskAssembly\build\MSBuilder.CodeTaskAssembly.props') " />
	<Import Project="$(PackagesPath)\MSBuilder.DumpItems\build\MSBuilder.DumpItems.targets"
			Condition=" Exists('$(PackagesPath)\MSBuilder.DumpItems\build\MSBuilder.DumpItems.targets') "/>
	<Import Project="$(PackagesPath)\MSBuilder.IsAdministrator\build\MSBuilder.IsAdministrator.targets" 
			Condition=" Exists('$(PackagesPath)\MSBuilder.IsAdministrator\build\MSBuilder.IsAdministrator.targets') "/>
	<Import Project="$(PackagesPath)\MSBuilder.VsixInstaller\build\MSBuilder.VsixInstaller.targets"
			Condition=" Exists('$(PackagesPath)\MSBuilder.VsixInstaller\build\MSBuilder.VsixInstaller.targets') And '$(IntegrationTest)' == 'true' " />

	<PropertyGroup>
		<TestDependsOn>PrepareTest;TestWin;TestMac</TestDependsOn>
		<TestDependsOn Condition=" '$(IntegrationTest)' == 'true' ">
			PrepareInstall;
			Install;
			$(TestDependsOn);
			Uninstall
		</TestDependsOn>
	</PropertyGroup>

	<Target Name="Versions">
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" Targets="GetVersions">
			<Output TaskParameter="TargetOutputs" ItemName="Version" />
		</MSBuild>
		<Message Importance="high" Text="$([System.IO.Path]::GetFileName('%(Version.MSBuildSourceProjectFile)').PadRight(36)) -&gt; %(Version.Identity)" />
	</Target>
	
	<Target Name="Test" DependsOnTargets="$(TestDependsOn)" />

	<Target Name="PrepareInstall" DependsOnTargets="IsAdministrator">
		<PropertyGroup>
			<PS>%WINDIR%\System32\WindowsPowerShell\v1.0\powershell.exe</PS>
		</PropertyGroup>

		<Message Text="Finding existing installation of Xamarin ..."
				 Importance="high" />

		<!-- Existing versions of Xamarin will collide with the provided IAsyncManager export, even from the normal hive -->
		<!-- NOTE: we could check the product version too if needed: Version is available from the Win32_Product structure -->
		<Exec Command="&quot;$(PS)&quot; -NoProfile -Command &quot;&amp; { get-wmiobject Win32_Product | Where-Object Name -eq Xamarin  | Select-Object -ExpandProperty IdentifyingNumber }&quot;"
			  StandardOutputImportance="low"
			  ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="XamarinProductCode" />
		</Exec>

		<!-- TODO: eventually we will need to do this for the normal hive Merq installation itself instead :(
		     although if that comes as a VSIX, it may be simpler to achieve?
		-->
		<Error Condition=" '$(IsAdministrator)' == 'false' And '$(XamarinProductCode)' != '' "
			   Text="Existing Xamarin product installation found, but current user is not Administrator and can't uninstall it." />

		<ItemGroup>
			<SupportedVersion Include="11.0;12.0;14.0;15.0;16.0" />
			<SupportedVersion>
				<InstallDir>$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\%(Identity)', 'InstallDir', null, RegistryView.Registry32))</InstallDir>
			</SupportedVersion>
			<SupportedVersion>
				<SdkDir>$([System.IO.Path]::GetFullPath('%(InstallDir)..\..\VSSDK\VisualStudioIntegration\'))</SdkDir>
			</SupportedVersion>
			<InstalledVersion Include="@(SupportedVersion)" Condition=" Exists('%(SdkDir)') " />
		</ItemGroup>

		<Message Importance="$(DefaultImportance)" Text="Found Visual Studio versions with required VSSDK installed: @(InstalledVersion)." />

		<Message Text="Killing running devenv processes in preparation for install actions..."
				 Condition=" '$(XamarinProductCode)' != '' Or '$(ResetExperimental)' == 'true' "
				 Importance="high" />

		<!-- Kill all running devenv processes -->
		<Exec Command="&quot;$(PS)&quot; -NoProfile -Command &quot;&amp; { Get-Process | Where-Object ProcessName -eq devenv | Stop-Process }&quot;"
			  StandardOutputImportance="low"
			  Condition=" '$(XamarinProductCode)' != '' Or '$(ResetExperimental)' == 'true' " />

		<Message Text="Found installed Xamarin product, uninstalling to avoid incompatibilities during integration test run..."
				 Condition="'$(XamarinProductCode)' != '' "
				 Importance="high" />

		<Exec Command='msiexec /x $(XamarinProductCode) /norestart /q | more'
			  Condition=" '$(XamarinProductCode)' != '' " />

		<Message Text="Resetting experimental instances..."
				 Condition=" '$(ResetExperimental)' == 'true' "
				 Importance="high" />

		<Exec Command='"%(InstalledVersion.SdkDir)Tools\Bin\CreateExpInstance.exe" /Reset /VSInstance=%(InstalledVersion.Identity) /RootSuffix=Exp | more'
			  StandardOutputImportance="low"
			  Condition=" '$(ResetExperimental)' == 'true' And '$(IsAdministrator)' != 'true' " />

		<Exec Command='"%(InstalledVersion.InstallDir)devenv.exe" /ResetSettings General.vssettings /Embedding /RootSuffix Exp /Command File.Exit >NUL | more'
			  StandardOutputImportance="low"
			  Condition=" '$(ResetExperimental)' == 'true' And '$(IsAdministrator)' == 'true' " />

	</Target>

	<Target Name="Install" Inputs="@(InstalledVersion)" Outputs="%(InstalledVersion.Identity)-BATCH"
			Condition=" Exists('$(Installer)') ">

		<Message Importance="$(DefaultImportance)" Text="Installing Merq to Visual Studio %(InstalledVersion.Identity)$(_RootSuffix)" />
		<InstallVsix VisualStudioVersion="@(InstalledVersion)"
					 VsixPath="$(Installer)"
					 RootSuffix="$(_RootSuffix)"
					 MessageImportance="$(DefaultImportance)" />

		<Message Importance="$(DefaultImportance)" Text="Flushing MEF cache for Visual Studio %(InstalledVersion.Identity)$(_RootSuffix)." />
		<Exec Command='rmdir "$(LocalAppData)\Microsoft\VisualStudio\%(InstalledVersion.Identity)$(_RootSuffix)\ComponentModelCache" /S /Q'
			  StandardOutputImportance="low"
			  Condition=" Exists('$(LocalAppData)\Microsoft\VisualStudio\%(InstalledVersion.Identity)$(_RootSuffix)\ComponentModelCache') "/>
	</Target>

	<Target Name="Uninstall" Inputs="@(InstalledVersion)" Outputs="%(InstalledVersion.Identity)-BATCH">
		<Message Importance="$(DefaultImportance)" Text="Uninstalling Merq from Visual Studio %(InstalledVersion.Identity)$(_RootSuffix)" />
		<UninstallVsix VisualStudioVersion="%(InstalledVersion.Identity)"
					   VsixId="Merq"
					   RootSuffix="$(_RootSuffix)" 
					   MessageImportance="$(DefaultImportance)" />
	</Target>

	<Target Name="PrepareTest" DependsOnTargets="Build">
		<MSBuild Projects="@(TestProject)" BuildInParallel="false" Targets="GetTargetPath" Properties="$(CommonBuildProperties)">
			<Output TaskParameter="TargetOutputs" ItemName="_TestAssembly" />
		</MSBuild>
		<MSBuild Projects="@(IntegrationTestProject)" BuildInParallel="false" Targets="GetTargetPath" Properties="$(CommonBuildProperties)"
				 Condition=" '@(IntegrationTestProject)' != '' ">
			<Output TaskParameter="TargetOutputs" ItemName="_IntegrationTestAssembly" />
		</MSBuild>

		<ItemGroup>
			<TestAssembly Include="@(_TestAssembly)" Condition=" Exists('%(_TestAssembly.FullPath)') " />
			<IntegrationTestAssembly Include="@(_IntegrationTestAssembly)" Condition=" Exists('%(_IntegrationTestAssembly.FullPath)') " />
		</ItemGroup>

		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />
	</Target>

	<Target Name="TestWin" DependsOnTargets="PrepareTest" Condition=" '$(OS)' == 'Windows_NT' ">
		<PropertyGroup>
			<XunitConsole>$(PackagesPath)\xunit.runner.console\tools\xunit.console.x86.exe</XunitConsole>
			<XunitOptions>$(XunitOptions) -html $(Out)\test.html -xml $(Out)\test.xml -parallel all -noshadow</XunitOptions>

			<CoverageConsole>$(PackagesPath)\OpenCover\tools\OpenCover.Console.exe</CoverageConsole>
			<CoverageOptions>$(CoverageOptions) -output:$(Out)\coverage.xml -returntargetcode -register:user -filter:"+[Merq.*]* -[xunit*]* -[*Tests]* -[*]*ThisAssembly* -[*]*IFluentInterface*" -excludebyattribute:*ExcludeFromCodeCoverage*;*CompilerGenerated* -skipautoprops -showunvisited -mergebyhash</CoverageOptions>
			<CoverageCommand>$(CoverageConsole) $(CoverageOptions) -target:$(XunitConsole) -targetargs:"@(TestAssembly, ' ') $(XunitOptions)"</CoverageCommand>
		</PropertyGroup>

		<Message Importance="high" Text="Executing: $(CoverageCommand)" />
		<Exec Command="$(CoverageCommand)" ContinueOnError="ErrorAndContinue" />

		<Exec Command="$(XunitConsole) @(IntegrationTestAssembly, ' ') $(XunitOptions.Replace('test', 'integrationtest'))"
			  Condition=" '@(IntegrationTestAssembly)' != '' "
			  ContinueOnError="ErrorAndContinue" />
	</Target>

	<Target Name="TestMac" DependsOnTargets="PrepareTest" Condition=" '$(OS)' != 'Windows_NT' ">
		<xunit Assemblies="@(TestAssembly)"
			   Html="$(Out)\test.html"
			   Xml="$(Out)\test.xml"
			   ParallelizeAssemblies="true"
			   ParallelizeTestCollections="true"
			   ContinueOnError="ErrorAndContinue" />
	</Target>

	<!-- Configure and restore initial targets and packages -->
	<Import Project="src\Merq.targets" />
	<PropertyGroup>
		<GitInfoTargets>$(PackagesPath)\GitInfo\build\GitInfo.targets</GitInfoTargets>
		<PendingRestore Condition="!Exists('$(GitInfoTargets)')">true</PendingRestore>
	</PropertyGroup>
	<!-- Overwritten by the import below if it exists -->
	<Target Name="GitInfoReport" />
	<Target Name="GitVersion" />
	<Import Project="$(GitInfoTargets)" Condition="Exists('$(GitInfoTargets)')"/>

	<Target Name="Configure" DependsOnTargets="DownloadNuGet;GitInfoReport;GetVersion">
		<Exec Command='"$(NuGet)" Install "$(MSBuildThisFileDirectory)packages.config" -OutputDirectory "$(PackagesPath)" -ExcludeVersion -Verbosity quiet'
			  StandardOutputImportance="low"
			  Condition=" '$(PendingRestore)' == 'true' " />

		<!-- Errors if nuget packages were restored during the build -->
		<Error Text="Required build-time NuGet packages were missing and were just restored. Please run the build again."
			   Condition="'$(PendingRestore)' == 'true' And '$(target)' != 'configure'"/>
	
		<Message Importance="high" Text="Building version $(Version)" />
		
        <!-- Update AppVeyor build # to match the actual one being used -->
        <Exec Command="appveyor UpdateBuild -Version $(Version)" Condition=" '$(PendingRestore)' != 'true' And '$(APPVEYOR)' == 'true' "
              ConsoleToMSBuild="true"
              ContinueOnError="WarnAndContinue" />	
	</Target>
</Project>
