<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="CoreBuild/1.0.0-beta" DefaultTargets="All">
	<Import Project="src\Directory.Build.props" />

	<PropertyGroup>
		<Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
		<IntermediateOutputPath>.nuget\</IntermediateOutputPath>
		<Out Condition=" '$(Out)' == '' ">$(MSBuildThisFileDirectory)out</Out>
		<GitInfoBaseDir>$(MSBuildThisFileDirectory)src</GitInfoBaseDir>
		<GitInfoReportImportance>high</GitInfoReportImportance>
		<GitSkipCache>true</GitSkipCache>
		<GitIgnoreTagVersion>true</GitIgnoreTagVersion>

		<!-- We always use DeployExtension=false from the build script to ensure a clean build, but 
			 also because if we run integration tests, we do so by installing the resulting VSIX, 
			 which makes for a cleaner test too. 	-->
		<CommonBuildProperties>WarningLevel=0;NoWarn=1591;RunCodeAnalysis=false;Configuration=$(Configuration);Out=$(Out);DeployExtension=false;PackageOutputPath=$(Out);NoPackageAnalysis=true</CommonBuildProperties>
		<DefaultImportance Condition=" '$(DefaultImportance)' == '' ">high</DefaultImportance>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="GitInfo" Version="2.0.9"/>
		<PackageReference Include="GitLink" Version="2.2.0"/>
		<PackageReference Include="xunit.runner.msbuild" Version="2.1.0"/>
		<PackageReference Include="xunit.runner.console" Version="2.1.0"/>
		<PackageReference Include="OpenCover" Version="4.6.519"/>
		<PackageReference Include="coveralls.io" Version="1.3.4"/>
		<PackageReference Include="MSBuilder.CI" Version="0.1.2"/>
		<PackageReference Include="NuGet.Build.Packaging" Version="0.2.2"/>
		<PackageReference Include="Sleet.Azure" Version="0.2.5" />
	</ItemGroup>
	
	<ItemGroup>
		<Solution Include="src\*.sln"/>
	</ItemGroup>

	<Target Name="All" DependsOnTargets="Build;Package" />

	<Target Name="Clean">
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" Targets="Clean" />
		<Exec Command="rmdir $(Out) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir $(PackagesPath) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir src\packages /S /Q" ContinueOnError="true" />
	</Target>

	<Target Name="Rebuild" DependsOnTargets="Clean;Build" />

	<Target Name="Configure" DependsOnTargets="Restore" />

	<Target Name="AfterRestore" AfterTargets="Restore" Label="Hidden">
		<MSBuild Projects="%(Solution.FullPath);src\Merq.VisualStudio.proj" Targets="Restore"  />
	</Target>

	<Target Name="Build" DependsOnTargets="$(BuildDependsOn)">
		<Message Importance="high" Text="Building version $(Version)" />
		<Message Text="##vso[build.updatebuildnumber]$(Version)+$(GitCommit).$(BUILD_BUILDID)" Importance="high" Condition="'$(TF_BUILD)' == 'true'" />

		<Exec Command='rmdir "$(Out)" /S /Q' Condition="Exists('$(Out)')" ContinueOnError="true" StandardOutputImportance="low" />
		<Message Text="Build properties: $(CommonBuildProperties)" Importance="high" />

		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />

		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" />
	</Target>

	<Target Name="Package" DependsOnTargets="_CollectPackableProjects" Returns="@(PackableProjects)">
		<Exec Command="$(NuGetPackageRoot)\gitlink\2.2.0\lib\net45\GitLink.exe . -f &quot;$([System.String]::new('%(Solution.FullPath)').Replace('$(MSBuildProjectDirectory)', '').TrimStart('\').TrimStart('/'))&quot; -u https://github.com/MobileEssentials/Merq -b &quot;$(GitBranch)&quot; -c &quot;$(Configuration)&quot;" StandardOutputImportance="low" />

		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />

		<MSBuild Projects="@(PackableProjects)" Targets="Pack" Properties="$(CommonBuildProperties)" />
	</Target>

	<Target Name="BeforePush" BeforeTargets="Push">
		<ItemGroup>
			<Package Include="$(Out)\*.nupkg" />
		</ItemGroup>
	</Target>

	<Target Name="Versions" DependsOnTargets="_CollectPackableProjects" AfterTargets="Build">
		<MSBuild Projects="@(PackableProjects)" Properties="$(CommonBuildProperties)" Targets="GetPackageVersion">
			<Output TaskParameter="TargetOutputs" ItemName="Version" />
		</MSBuild>
		<Message Importance="high" Text="$([System.IO.Path]::GetFileName('%(Version.MSBuildSourceProjectFile)').PadRight(36)) -&gt; %(Version.Identity)" />
	</Target>

	<Target Name="_CollectPackableProjects" Returns="@(PackableProjects)">
		<ItemGroup>
			<AllProjects Include="src\**\*.*proj" Exclude="src\**\*.wixproj" />
		</ItemGroup>

		<MSBuild Projects="@(AllProjects)" Targets="GetTargetPath">
			<Output ItemName="AllProjectTargetPath" TaskParameter="TargetOutputs"/>
		</MSBuild>

		<ItemGroup>
			<PackableProjects Include="@(AllProjectTargetPath -> '%(OriginalItemSpec)')" Condition="'%(AllProjectTargetPath.IsPackable)' == 'true'" />
		</ItemGroup>
	</Target>
	
	<Import Project="src\Directory.Build.targets" />
</Project>
